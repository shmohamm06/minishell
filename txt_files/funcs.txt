TERM.H GROUP BELLOW

#include <curses.h>
#include <term.h>

DESCRIPTION
These routines are included as a conversion aid for programs that use the termcap library.
Their parameters are the same and the routines are emulated using the terminfo database. 
Thus, they can only be used to query the capabilities of entries for which a terminfo entry has been compiled.
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

int tputs(const char *str, int affcnt, int (*putc)(int));

-The tputs routine applies padding information to the string str and outputs it.
 The str must be a terminfo string variable or the return value from tparm, tgetstr, or tgoto. 
 affcnt is the number of lines affected, or 1 if not applicable. 
 putc is a putchar-like routine to which the characters are passed, one at a time.

--------------------------------------------------------------------------------------

char *tgoto(const char *cap, int col, int row);

-The tgoto routine instantiates the parameters into the given capability.
 The output from this routine is to be passed to tputs.

--------------------------------------------------------------------------------------

char *tgetstr(char *id, char **area);

-The tgetstr routine returns the string entry for id, 
 or zero if it is not available. Use tputs to output the returned string. 
 The return value will also be copied to the buffer pointed to by area, 
 and the area value will be updated to point past the null ending this value.

--------------------------------------------------------------------------------------

int tgetnum(char *id);

-The tgetnum routine gets the numeric entry for id, or -1 if it is not available.

--------------------------------------------------------------------------------------

int tgetflag(char *id);

-The tgetflag routine gets the boolean entry for id, or zero if it is not available.

--------------------------------------------------------------------------------------

int tgetent(char *bp, const char *name);

-The tgetent routine loads the entry for name. It returns 1 on success, 
 0 if there is no such entry, and -1 if the terminfo database could not be found. 
 The emulation ignores the buffer pointer bp.

 --------------------------------------------------------------------------------------
 --------------------------------------------------------------------------------------
 --------------------------------------------------------------------------------------


TERMINOS.H GROUP BELLOW

#include <termios.h>
#include <unistd.h>

DESCRIPTION
The termios functions describe a general terminal interface that is provided to control 
asynchronous communications ports.

struct 
tcflag_t c_iflag;      /* input modes */
tcflag_t c_oflag;      /* output modes */
tcflag_t c_cflag;      /* control modes */
tcflag_t c_lflag;      /* local modes */
cc_t     c_cc[NCCS];   /* special characters */
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

int tcgetattr(int fd, struct termios *termios_p);

-gets the parameters associated with the object referred by fd and stores them in the termios 
 structure referenced by termios_p. This function may be invoked from a background process; however, 
the terminal attributes may be subsequently changed by a foreground process.

--------------------------------------------------------------------------------------

int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);

-sets the parameters associated with the terminal (unless support is required from the underlying hardware 
 that is not available) from the termios structure referred to by termios_p. optional_actions specifies when 
the changes take effect:

    TCSANOW
        the change occurs immediately.
    TCSADRAIN
        the change occurs after all output written to fd has been transmitted. 
        This function should be used when changing parameters that affect output.
    TCSAFLUSH
        the change occurs after all output written to the object referred by fd has been transmitted, 
        and all input that has been received but not read will be discarded before the change is made.       

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <stdlib.h>

char *getenv(const char *name);

-The getenv() function searches the environment list to find the
 environment variable name, and returns a pointer to the
 corresponding value string.

RETURN
The getenv() function returns a pointer to the value in the
environment, or NULL if there is no match.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <sys/ioctl.h>

int ioctl(int fd, unsigned long request, ...);

-The ioctl() system call manipulates the underlying device
parameters of special files.  In particular, many operating
characteristics of character special files (e.g., terminals) may
be controlled with ioctl() requests.  The argument fd must be an
open file descriptor.

RETURN
Usually, on success zero is returned.  A few ioctl() requests use
the return value as an output parameter and return a nonnegative
value on success.  On error, -1 is returned, and errno is set to
indicate the error.
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>     

int ttyslot(void);

ind the slot of the current user's terminal in some file
The legacy function ttyslot() returns the index of the current
user's entry in some file.

RETURN
 If successful, this function returns the slot number.  On error it returns 0

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

char *ttyname(int fd);

return name of a terminal

-  The function ttyname() returns a pointer to the null-terminated
    pathname of the terminal device that is open on the file
    descriptor fd, or NULL on error (for example, if fd is not
    connected to a terminal).  The return value may point to static
    data, possibly overwritten by the next call.  The function
    ttyname_r() stores this pathname in the buffer buf of length
    buflen.

RETURN
The function ttyname() returns a pointer to a pathname on
success.  On error, NULL is returned, and errno is set to
indicate the error.  The function ttyname_r() returns 0 on
success, and an error number upon error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

int isatty(int fd);

test whether a file descriptor refers to a terminal

-The isatty() function tests whether fd is an open file descriptor
 referring to a terminal.

RETURN
isatty() returns 1 if fd is an open file descriptor referring to
a terminal; otherwise 0 is returned, and errno is set to indicate
the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

 #include <stdio.h>

void perror(const char *s);

print a system error message

-The perror() function produces a message on standard error
 describing the last error encountered during a call to a system
 or library function.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <string.h>

char *strerror(int errnum);

-The strerror() function returns a pointer to a string that
 describes the error code passed in the argument errnum
 For example, if errnum is EINVAL, the
 returned description will be "Invalid argument".

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <sys/types.h>
#include <dirent.h>

int closedir(DIR *dirp);

close a directory

The closedir() function closes the directory stream associated
with dirp.  A successful call to closedir() also closes the
underlying file descriptor associated with dirp.  The directory
stream descriptor dirp is not available after this call.

RETURN
The closedir() function returns 0 on success.  On error, -1 is
returned, and errno is set to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <dirent.h>

struct dirent *readdir(DIR *dirp);

read a directory

The readdir() function returns a pointer to a dirent structure
representing the next directory entry in the directory stream
pointed to by dirp.  It returns NULL on reaching the end of the
directory stream or if an error occurred.

struct dirent {
               ino_t          d_ino;       /* Inode number */
               off_t          d_off;       /* Not an offset; see below */
               unsigned short d_reclen;    /* Length of this record */
               unsigned char  d_type;      /* Type of file; not supported
                                              by all filesystem types */
               char           d_name[256]; /* Null-terminated filename */
           };

RETURN
On success, readdir() returns a pointer to a dirent structure.
If the end of the directory stream is reached, NULL is returned

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <sys/types.h>
#include <dirent.h>

DIR *opendir(const char *name);

open a directory

The opendir() function opens a directory stream corresponding to
the directory name, and returns a pointer to the directory
stream.  The stream is positioned at the first entry in the
directory.

RETURN
return a pointer to the
directory stream.  On error, NULL is returned, and errno is set
to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

 #include <unistd.h>

int pipe(int pipefd[2]);

create pipe

pipe() creates a pipe, a unidirectional data channel that can be
used for interprocess communication.
The array pipefd is used to
return two file descriptors referring to the ends of the pipe.
pipefd[0] refers to the read end of the pipe.  pipefd[1] refers
to the write end of the pipe.  Data written to the write end of
the pipe is buffered by the kernel until it is read from the read
end of the pipe.

RETURN
 On success, zero is returned.  On error, -1 is returned

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

int dup(int oldfd);
int dup2(int oldfd, int newfd);

duplicate a file descriptor

The dup() system call allocates a new file descriptor that refers
to the same open file description as the descriptor oldfd.

The dup2() system call performs the same task as dup(), but
instead of using the lowest-numbered unused file descriptor, it
uses the file descriptor number specified in newfd.

RETURN
On success, these system calls return the new file descriptor.
On error, -1 is returned, and errno is set to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

int execve(const char *pathname, char *const argv[], char *const envp[]);

execute program

execve() executes the program referred to by pathname.  This
causes the program that is currently being run by  the calling
process to be replaced with a new program, with newly initialized
stack, heap, and (initialized and uninitialized) data segments.

pathname must be either a binary executable, or a script

RETURN
On success, execve() does not return, on error -1 is returned,
and errno is set to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

int unlink(const char *pathname);

delete a name and possibly the file it refers to

unlink() deletes a name from the file system. If that name was
the last link to a file and no processes have the file open the file 
is deleted and the space it was using is made available for reuse.

RETURN
On success, zero is returned. On error, -1 is returned, and errno is set appropriately.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

int stat(const char *path, struct stat *buf);
int fstat(int fd, struct stat *buf);
int lstat(const char *path, struct stat *buf);

get file status

These functions return information about a file. No permissions are 
required on the file itself, but-in the case of stat() and lstat() - execute 
(search) permission is required on all of the directories in path that lead to the file.

stat() stats the file pointed to by path and fills in buf.

lstat() is identical to stat(), except that if path is a symbolic link, 
then the link itself is stat-ed, not the file that it refers to.

fstat() is identical to stat(), except that the file to be stat-ed is specified 
by the file descriptor fd.

All of these system calls return a stat structure, which contains the following fields:

struct stat {
    dev_t     st_dev;     /* ID of device containing file */
    ino_t     st_ino;     /* inode number */
    mode_t    st_mode;    /* protection */
    nlink_t   st_nlink;   /* number of hard links */
    uid_t     st_uid;     /* user ID of owner */
    gid_t     st_gid;     /* group ID of owner */
    dev_t     st_rdev;    /* device ID (if special file) */
    off_t     st_size;    /* total size, in bytes */
    blksize_t st_blksize; /* blocksize for file system I/O */
    blkcnt_t  st_blocks;  /* number of 512B blocks allocated */
    time_t    st_atime;   /* time of last access */
    time_t    st_mtime;   /* time of last modification */
    time_t    st_ctime;   /* time of last status change */
};

RETURN
On success, zero is returned. On error, -1 is returned, and errno is set appropriately.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

int chdir(const char *path);

change working directory

chdir() changes the current working directory of the calling
process to the directory specified in path.

RETURN
On success, zero is returned.  On error, -1 is returned, and
errno is set to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <unistd.h>

char *getcwd(char *buf, size_t size);

get current working directory

The getcwd() function copies an absolute pathname of the current
working directory to the array pointed to by buf, which is of
length size.

RETURN
On success, these functions return a pointer to a string
containing the pathname of the current working directory
else NULL

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

 #include <stdlib.h>

noreturn void exit(int status);

The exit() function causes normal process termination and the
least significant byte of status

RETURN---

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <signal.h>

int kill(pid_t pid, int sig);

send signal to a process

 The kill() system call can be used to send any signal to any
process group or process.

RETURN
On success (at least one signal was sent), zero is returned.  On
error, -1 is returned, and errno is set to indicate the error.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>

https://tiswww.case.edu/php/chet/readline/readline.html#IDX304



char *readline (const char *prompt);

_____________________________________________________________________________________
_____________________________________________________________________________________

void rl_clear_history (void)

Clear the history list by deleting all of the entries, in the same 
manner as the History library's clear_history() function. 
This differs from clear_history because it frees private data 
Readline saves in the history list.

_____________________________________________________________________________________
_____________________________________________________________________________________

int rl_on_new_line (void)

Tell the update functions that we have moved onto a new (empty) line, 
usually after outputting a newline.

_____________________________________________________________________________________
_____________________________________________________________________________________

void rl_replace_line (const char *text, int clear_undo)

Replace the contents of rl_line_buffer with text. The point and mark are 
preserved, if possible. If clear_undo is non-zero, the undo list 
associated with the current line is cleared.

_____________________________________________________________________________________
_____________________________________________________________________________________

void rl_redisplay (void)

Change what's displayed on the screen to reflect the current contents of rl_line_buffer.

_____________________________________________________________________________________
_____________________________________________________________________________________

add_history (line);

If you want the user to be able to get at the line later, (with C-p for example), 
you must call add_history() to save the line away in a history list of such lines.

_____________________________________________________________________________________
_____________________________________________________________________________________

#include <unistd.h>

int access(const char *path, int amode);

The access() function shall check the file named by the pathname pointed 
to by the path argument for accessibility according to the bit pattern 
contained in amode, using the real user ID in place of the effective 
user ID and the real group ID in place of the effective group ID.

The value of amode is either the bitwise-inclusive OR of the access 
permissions to be checked (R_OK, W_OK, X_OK) or the existence test (F_OK).

If any access permissions are checked, each shall be checked individually, 
as described in the Base Definitions volume of IEEE Std 1003.1-2001, Chapter 3, 
Definitions. If the process has appropriate privileges, an implementation may 
indicate success for X_OK even if none of the execute file permission bits are set.

RETURN VALUE
If the requested access is permitted, access() succeeds and shall return 0; 
otherwise, -1 shall be returned and errno shall be set to indicate the error.

_____________________________________________________________________________________
_____________________________________________________________________________________

Wait() waits for any child process but waitpid() waits for a specific child equal to pid

_____________________________________________________________________________________
_____________________________________________________________________________________

In other words,wait3() waits of any child, while wait4() can be used to select a 
specific child, or children, on which to wait.

_____________________________________________________________________________________
_____________________________________________________________________________________


     #include <signal.h>

     void (*signal(int sig, void (*func)(int)))(int);

     or in the equivalent but easier to read typedef'd version:

     typedef void (*sig_t) (int);

     sig_t
     signal(int sig, sig_t func);



_____________________________________________________________________________________
_____________________________________________________________________________________

#include <signal.h>

struct  sigaction {
		union __sigaction_u __sigaction_u;  /* signal handler */
		sigset_t sa_mask;               /* signal mask to apply */
		int     sa_flags;               /* see signal options below */
};

union __sigaction_u {
		void    (*__sa_handler)(int);
		void    (*__sa_sigaction)(int, siginfo_t *,
					void *);
};

#define sa_handler      __sigaction_u.__sa_handler
#define sa_sigaction    __sigaction_u.__sa_sigaction

int
sigaction(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact);


